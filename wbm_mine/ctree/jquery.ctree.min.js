//cTree v0.1 http://lifelaf.com/ctree, Licensed same as jQuery - MIT or GPL v2.
/*
 * All comments with MOD/ADD/REM entry describe modifications/extensions/removes made by PHOENIX CONTACT Electronics GmbH on the original cTree source code 
 */

(function($) {
    "use strict";
    
    
    /* ADD: List to save generated Trees */
    $.generatedTreesMap = {};
    $.fn.ctree = function(config) {
        return this.each(function() {
            var container = $(this);
            container.html('Loading...');
            /* ADD: Create tree object and add this new tree to tree list */
            $.generatedTreesMap[$(this).attr('id')] = new CTree(container, config, $(this).attr('id'));
            /* MOD: get tree object from the trees list */
            var tree = $.generatedTreesMap[$(this).attr('id')];
            tree.init();
            container.empty().append(tree.getTreeHTML());
        });
    };
    /* ADD: function unloadCtree() - unloads the tree of the object calling this function */
    $.fn.unloadCtree = function()
    {
        $.generatedTreesMap[$(this).attr('id')].unload($(this));
        delete $.generatedTreesMap[$(this).attr('id')];
    };
    /* ADD: function getCtreeConfigs() - returns the tree config object of a tree */
    $.fn.getCtreeConfigs = function()
    {
        return $.generatedTreesMap[$(this).attr('id')].config; 
    };
    $.ctree = {
        isCanvasSupported: false,
        line_center_canvasURL: "",
        line_bottom_canvasURL: "",
        plus_center_canvasURL: "",
        minus_center_canvasURL: "",
        plus_bottom_canvasURL: "",
        minus_bottom_canvasURL: "",
        plus_top_canvasURL: "",
        minus_top_canvasURL: "",
        plus_single_canvasURL: "",
        minus_single_canvasURL: "",
        line_conn_canvasURL: "",
        rgbGray: [192, 192, 192],
        rgbBlue: [112, 146, 190],
        rgbBlack: [0, 0, 0],
        treeNum: 0,
        EVENT_SELECT: "CTREE_EVENT_SELECT",
        EVENT_DESELECT: "CTREE_EVENT_DESELECT"
    };
    /* MOD: Added parameter treeId to specifiy the tree via an ID */
    function CTree(container, config, treeId) {
        /* MOD : use specific Id instead of treeNum increment value*/
        //this.id = $.ctree.treeNum;
        this.id = treeId;
        $.ctree.treeNum++;
        this.container = container;
        this.config = config;
        this.treeHTML = $(config.json_data ? buildHTML(config, this.id) : '');
        this.lastSelectedArray = [];
    }
    CTree.prototype = {
        init: function() {
            this.treeHTML.children().first().children().last().css("margin-left", "-18px"); // Corrects the position of child nodes under the root, to match the layout/margin of the children
            this.treeHTML.children().first().addClass('ctree_top');
            /* MOD: changed obsolated JQuery function andSelf() with addBack() */
            this.treeHTML.find('ul').addBack().each(function(i, ul) {
                $(ul).children().last().addClass('ctree_last');
            });
            if ($('#ctree_defaultCSS').length === 0) {
                buildCSS();
            }
            if ($('#cTreeCanvasImgs').length === 0) {
                buildCanvas();
                buildCanvasNodeIconCSS();
            }
            if (this.config.cTreeImgs && (!$.ctree.isCanvasSupported || this.config.forceUseImgs === true)) {
                buildCtreeImgsNodeIconCSS(this.config.cTreeImgs, this.id);
            }
            this.container.delegate('.ctree_toggleNode', 'click', $.proxy(this._toggleNode, this));
            if (this.config.select_mode || this.config.singleSelect_mode) {
                this.container.delegate('ul.ctree_root li>a', 'click', $.proxy(this._clickNode, this));
                this.container.delegate('ul.ctree_root', 'click', $.proxy(this._clickVoidArea, this));
            }
        },
        /* ADD: function unload(container) - to undelegate all signals were delegated for this tree */
        unload: function(container) {
            this.container = container;
            this.container.undelegate('.ctree_toggleNode', 'click', $.proxy(this._toggleNode, this));
            if (this.config.select_mode || this.config.singleSelect_mode) {
                this.container.undelegate('ul.ctree_root li>a', 'click', $.proxy(this._clickNode, this));
                this.container.undelegate('ul.ctree_root', 'click', $.proxy(this._clickVoidArea, this));
            }
        },
        getTreeHTML: function() {
            return this.treeHTML;
        },
        _toggleNode: function(e) {
            var toggle = $(e.currentTarget);
            if (toggle.hasClass('ctree_nodeClose')) {
                this._openNode(toggle);
            } else if (toggle.hasClass('ctree_nodeOpen')) {
                this._closeNode(toggle);
            }
            e.preventDefault();
        },
        _openNode: function(toggle) {
            toggle.removeClass('ctree_nodeClose').addClass('ctree_nodeOpen');
            this._getUL(toggle).slideDown();
        },
        _closeNode: function(toggle) {
            toggle.removeClass('ctree_nodeOpen').addClass('ctree_nodeClose');
            this._getUL(toggle).slideUp();
            var selectedChildren = toggle.parent().children().find('.ctree_selected');
            selectedChildren.removeClass('ctree_selected');
            for (var i = 0; i < selectedChildren.length; i++) {
                this.lastSelectedArray.splice($(this.lastSelectedArray).index(selectedChildren[i]), 1);
            }
        },
        _getUL: function(toggle) {
            return toggle.parent().children('ul');
        },
        _clickNode: function(e) {
            var target = $(e.target);
            if (this.config.singleSelect_mode) {
                this._simpleClickNode(target);
                return;
            }
            if (e.ctrlKey == true || e.metaKey == true) {
                this._ctrlClickNode(target);
            } else if (e.shiftKey == true) {
                this._shiftClickNode(target);
            } else {
                this._simpleClickNode(target);
            }
            e.preventDefault();
        },
        _ctrlClickNode: function(target) {
            if (target.hasClass('ctree_selected')) {
                target.removeClass('ctree_selected');
                this.lastSelectedArray.splice($(this.lastSelectedArray).index(target[0]), 1);
                this.container.trigger($.ctree.EVENT_DESELECT, {
                    "deSelectNode": target.attr('cTreeNodeID'),
                    "allSelectedNodes": this._getSelectedNodesIDs()
                });
            } else {
                target.addClass('ctree_selected');
                this.lastSelectedArray.push(target[0]);
                this.container.trigger($.ctree.EVENT_SELECT, {
                    "selectNode": target.attr('cTreeNodeID'),
                    "allSelectedNodes": this._getSelectedNodesIDs()
                });
            }
        },
        _shiftClickNode: function(target) {
            var visibleNodes = target.closest('.ctree_root').find('li>a').filter(function() {
                return $(this).closest('.ctree_children').css('display') !== 'none'
            });
            var lastSelectedNode = this.lastSelectedArray[this.lastSelectedArray.length - 1];
            var lastIndex;
            if (!lastSelectedNode) {
                lastIndex = 0;
            } else {
                lastIndex = visibleNodes.index(lastSelectedNode);
            }
            var currentIndex = visibleNodes.index(target[0]);
            var reverse = lastIndex > currentIndex;
            for (var i = 0; i <= Math.abs(currentIndex - lastIndex); i++) {
                var node;
                if (reverse) {
                    node = $(visibleNodes[lastIndex - i]);
                } else {
                    node = $(visibleNodes[lastIndex + i]);
                }
                if (node.hasClass('ctree_selected')) {
                    node.removeClass('ctree_selected');
                    this.lastSelectedArray.splice($(this.lastSelectedArray).index(node[0]), 1);
                }
                node.addClass('ctree_selected');
                this.lastSelectedArray.push(node[0]);
            }
            this.container.trigger($.ctree.EVENT_SELECT, {
                "selectNode": target.attr('cTreeNodeID'),
                "allSelectedNodes": this._getSelectedNodesIDs()
            });
        },
        /* MOD: modified the functon content to pass needed values to the EVENT_SELECT */
        _simpleClickNode: function(target) {
            var lastSelectedNodes = target.closest('.ctree_root').find('.ctree_selected');
            lastSelectedNodes.removeClass('ctree_selected');
            target.addClass('ctree_selected');
            this.lastSelectedArray = [target[0]];
            this.container.trigger($.ctree.EVENT_SELECT, {
                "selectcTreeNodeId": target.attr('cTreeNodeID'),
                "selectNodeId": target.attr('id'), 
                "selectNodeName":target.attr('cTreeNodeName'), 
                "selectNodeType":target.attr('cNodeType'),
                "selectLocalNodeId":target.attr('cLocalNodeId'),
                "lastSelectedNodes" : lastSelectedNodes
            });
        },
        /* MOD: modified the function to pass last selected items to EVENT_DESELECT handler */
        _clickVoidArea: function(e) {
            if (this.config.noCancelSelect_mode) {
                return;
            }
            if (e.target.tagName != "A" && e.target.tagName != "BUTTON" && this.lastSelectedArray.length > 0) {
                var lastSelectedNodes = $(e.target).closest('.ctree_root').find('.ctree_selected');
                lastSelectedNodes.removeClass('ctree_selected');
                this.container.trigger($.ctree.EVENT_DESELECT, {
                    'allDeSelectedNodes': this._getSelectedNodesIDs(),
                    'lastSelectedNodes' : lastSelectedNodes
                });
                this.lastSelectedArray = [];
            }
        },
        _getSelectedNodesIDs: function() {
            var selectedNodesIDs = [];
            for (var i = 0; i < this.lastSelectedArray.length; i++) {
                selectedNodesIDs.push($(this.lastSelectedArray[i]).attr('cTreeNodeID'));
            }
            return selectedNodesIDs;
        }
    };

    function buildHTML(config, treeId) {
        var html = '<ul id="cTree_' + treeId + '" class="ctree_root';
        if (config.select_mode || config.singleSelect_mode) {
            html = html.concat(' ctree_selectMode');
        }
        html = html.concat('">');
        var json = config.json_data;
        if (json.cTreeNodeName) {
            html = html.concat(parseJSON(json, config.types));
        } else if (hasChildren(json)) {
            html = html.concat(parseArray(json.children, config.types));
        }
        return html.concat('</ul>');
    }

    function parseJSON(json, types) {
        var html = '<li unselectable="on">';
        if (hasChildren(json)) {
            
            html = html.concat('<button class="ctree_toggleNode ctree_nodeClose"></button>' + wrapAnchor(json, types));
            
            html = html.concat('<ul class="ctree_children">');
            html = html.concat(parseArray(json.children, types));
            html = html.concat('</ul>');
        } else {
            html = html.concat('<button class="ctree_leaf" style="pointer-events: none;"></button>' + wrapAnchor(json, types));
        }
        return html.concat('</li>');
    }

    function appendString(string) {
        return '<li unselectable="on"><button class="ctree_leaf" style="pointer-events: none;"></button><a>' + escapeHTML(string) + '</a></li>';
    }

    function parseArray(array, types) {
        var html = '';
        $.each(array, function(i) {
            if ($.type(array[i]) == "string") {
                html = html.concat(appendString(array[i]));
            } else {
                html = html.concat(parseJSON(array[i], types));
            }
        });
        return html;
    }

    function hasChildren(json) {
        return json.children && $.isArray(json.children);
    }

    function wrapAnchor(json, types) {
        if (!json.cTreeNodeName) {
            json.cTreeNodeName = json.cTreeNodeId;
        }
        var escapedName = escapeHTML(json.cTreeNodeName);
        if (!json.cTreeNodeId) {
            json.cTreeNodeId = '_cTreeNode_' + escapedName;
        }
        
        /* ADD: nodeImgHtml to specify if the node image has tooltip */
        var nodeImgHtml = '';
        if(types[json.type].imgtooltip)
        {
            nodeImgHtml = '<div class="tooltip"><img id="' + json.cTreeNodeId + '_img" src="' + types[json.type].icon + '" style="cursor: default; vertical-align: -1.55px;" width="12" height="12"></img><span id="' + json.cTreeNodeId + '_img_toolip" class="tooltip-text-top" style="cursor: default;"></span></div>' // Added vertical align to center images vertically
        }
        else
        {
            nodeImgHtml = '<div class="tooltip"><img id="' + json.cTreeNodeId + '_img" src="' + types[json.type].icon + '" style="cursor: default; vertical-align: -1.55px;" width="12" height="12"></img></div>' // Added vertical align to center images vertically
        }
        /* Added non clickable modes for tree nodes */
        if (json.type && types && types[json.type] && types[json.type].clickable == false)
        {
            return '<a id="id' + json.cTreeNodeId + '" cTreeNodeID="' + json.cTreeNodeId + '" cTreeNodeName="' + escapedName + '" cNodeType="' + json.type + '" cLocalNodeId="' + json.localNodeId + '" style="cursor: default; color:#5c5a5a;">' + nodeImgHtml + escapedName + '</a>';
        }
        else if (json.type && types && types[json.type]) {
            return '<a id="id' + json.cTreeNodeId + '"cTreeNodeID="' + json.cTreeNodeId + '" cTreeNodeName="' + escapedName + '" cNodeType="' + json.type + '" cLocalNodeId="' + json.localNodeId + '">' + nodeImgHtml + escapedName + '</a>';
        }
        
        return '<a id="id' + json.cTreeNodeId + '"cTreeNodeID="' + json.cTreeNodeId + '" cTreeNodeName="' + escapedName + '" cNodeType="' + json.type + '" cLocalNodeId="' + json.localNodeId + '">' + "<div></div>" + escapedName + '</a>';
    }

    function escapeHTML(name) {
        return name.replace(/</g, "&lt;").replace(/>/g, "&gt;");
    }

    function buildCSS() {
        var defaultCSS = $('<style type="text/css" id="ctree_defaultCSS">' 
                         + 'ul.ctree_root,ul.ctree_children{list-style-type:none;padding:0px;text-align:left}' 
                         + 'ul.ctree_children{display:none;margin-left:-2.45px }' + 'ul.ctree_root button{width:18px;height:18px;border:0;outline:none;vertical-align:middle;margin-top:-7.53px;}'  // Adjusted/added margins to "center" the cTreeNodeIcons.png icons
                         + 'ul.ctree_root li{line-height:16px;font-size:12px;margin-left:18px;white-space:nowrap;user-select:none;-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none}' 
                         + 'button.ctree_toggleNode{cursor:pointer}' 
                         + '.ctree_leaf,.ctree_toggleNode{background-repeat:no-repeat;margin-left:-2.45px }'   // Added margin to "center" the cTreeNodeIcons.png dot line icons
                         + 'li.ctree_last>ul.ctree_children{background:transparent}</style>');
        var selectModeCSS = $('<style type="text/css" id="ctree_selectModeCSS">ul.ctree_root.ctree_selectMode li>a{cursor:pointer;border-radius:2px;-moz-border-radius:2px}' 
                         + 'ul.ctree_root.ctree_selectMode li>a:hover{background-color:#c0c0c0; text-decoration:none;}' 
                         + 'ul.ctree_root.ctree_selectMode li>a.ctree_selected{background-color:#4171ef;color:white}</style>');
        defaultCSS.appendTo('head');
        selectModeCSS.appendTo('head');
    }

    function buildCanvasNodeIconCSS() {
        var canvasNodeIconCSS = $('<style type="text/css" id="ctree_canvasNodeIconCSS">' + 'button.ctree_leaf{background:url("' + $.ctree.line_center_canvasURL + '")}' + 'li.ctree_last>button.ctree_leaf{background:url("' + $.ctree.line_bottom_canvasURL + '")}' + 'button.ctree_toggleNode.ctree_nodeClose{background:url("' + $.ctree.plus_center_canvasURL + '")}' + 'button.ctree_toggleNode.ctree_nodeOpen{background:url("' + $.ctree.minus_center_canvasURL + '")}' + 'li.ctree_last>button.ctree_toggleNode.ctree_nodeClose{background:url("' + $.ctree.plus_bottom_canvasURL + '")}' + 'li.ctree_last>button.ctree_toggleNode.ctree_nodeOpen{background:url("' + $.ctree.minus_bottom_canvasURL + '")}' + 'li.ctree_top>button.ctree_toggleNode.ctree_nodeClose{background:url("' + $.ctree.plus_top_canvasURL + '")}' + 'li.ctree_top>button.ctree_toggleNode.ctree_nodeOpen{background:url("' + $.ctree.minus_top_canvasURL + '")}' + 'li.ctree_top.ctree_last>button.ctree_toggleNode.ctree_nodeClose{background:url("' + $.ctree.plus_single_canvasURL + '")}' + 'li.ctree_top.ctree_last>button.ctree_toggleNode.ctree_nodeOpen{background:url("' + $.ctree.minus_single_canvasURL + '")}' + 'ul.ctree_children{background: url("' + $.ctree.line_conn_canvasURL + '") repeat-y}</style>');
        canvasNodeIconCSS.appendTo('head');
    }

    function buildCtreeImgsNodeIconCSS(cTreeImgs, cTreeId) {
        var cTreeImgsNodeIconCSS = $('<style type="text/css" id="ctree_' + cTreeId + '_imageNodeIconCSS">' + '#cTree_' + cTreeId + ' button.ctree_leaf{background:url("' + cTreeImgs + '");background-position:0 -36px}' + '#cTree_' + cTreeId + ' li.ctree_last>button.ctree_leaf{background:url("' + cTreeImgs + '");background-position:0 -54px}' + '#cTree_' + cTreeId + ' button.ctree_toggleNode.ctree_nodeClose{background:url("' + cTreeImgs + '");background-position:0 -18px}' + '#cTree_' + cTreeId + ' button.ctree_toggleNode.ctree_nodeOpen{background:url("' + cTreeImgs + '");background-position:-18px -18px}' + '#cTree_' + cTreeId + ' li.ctree_last>button.ctree_toggleNode.ctree_nodeClose{background:url("' + cTreeImgs + '");background-position:-36px 0}' + '#cTree_' + cTreeId + ' li.ctree_last>button.ctree_toggleNode.ctree_nodeOpen{background:url("' + cTreeImgs + '");background-position:-18px -36px}' + '#cTree_' + cTreeId + ' li.ctree_top>button.ctree_toggleNode.ctree_nodeClose{background:url("' + cTreeImgs + '");background-position:0 0}' + '#cTree_' + cTreeId + ' li.ctree_top>button.ctree_toggleNode.ctree_nodeOpen{background:url("' + cTreeImgs + '");background-position:-18px 0}' + '#cTree_' + cTreeId + ' li.ctree_top.ctree_last>button.ctree_toggleNode.ctree_nodeClose{background:url("' + cTreeImgs + '");background-position:-36px -18px}' + '#cTree_' + cTreeId + ' li.ctree_top.ctree_last>button.ctree_toggleNode.ctree_nodeOpen{background:url("' + cTreeImgs + '");background-position:-36px -36px}' + '#cTree_' + cTreeId + ' ul.ctree_children{background: url("' + cTreeImgs + '");background-position:-54px 0;background-repeat:repeat-y}' + '#cTree_' + cTreeId + ' li.ctree_last>ul.ctree_children{background:transparent}</style>');
        cTreeImgsNodeIconCSS.appendTo('head');
    }

    function buildCanvas() {
        var cTreeCanvasImgsCtner = $('<div id="cTreeCanvasImgs" style="display:none;"></div>');
        cTreeCanvasImgsCtner.append($('<canvas id="cTree_lineCenterCanvas" width="18" height="18"></canvas>'));
        cTreeCanvasImgsCtner.append($('<canvas id="cTree_lineBottomCanvas" width="18" height="18"></canvas>'));
        cTreeCanvasImgsCtner.append($('<canvas id="cTree_plusCenterCanvas" width="18" height="18"></canvas>'));
        cTreeCanvasImgsCtner.append($('<canvas id="cTree_minusCenterCanvas" width="18" height="18"></canvas>'));
        cTreeCanvasImgsCtner.append($('<canvas id="cTree_plusBottomCanvas" width="18" height="18"></canvas>'));
        cTreeCanvasImgsCtner.append($('<canvas id="cTree_minusBottomCanvas" width="18" height="18"></canvas>'));
        cTreeCanvasImgsCtner.append($('<canvas id="cTree_plusTopCanvas" width="18" height="18"></canvas>'));
        cTreeCanvasImgsCtner.append($('<canvas id="cTree_minusTopCanvas" width="18" height="18"></canvas>'));
        cTreeCanvasImgsCtner.append($('<canvas id="cTree_plusSingleCanvas" width="18" height="18"></canvas>'));
        cTreeCanvasImgsCtner.append($('<canvas id="cTree_minusSingleCanvas" width="18" height="18"></canvas>'));
        cTreeCanvasImgsCtner.append($('<canvas id="cTree_lineConnCanvas" width="18" height="18"></canvas>'));
        cTreeCanvasImgsCtner.appendTo('body');
        if (!getLineCenterCanvas().getContext) {
            $.ctree.isCanvasSupported = false;
        } else {
            $.ctree.isCanvasSupported = true;
            buildLineCenterCanvas();
            buildPlusCenterCanvas();
            buildLineBottomCanvas();
            buildLineConnCanvas();
            buildMinusCenterCanvas();
            buildPlusBottomCanvas();
            buildMinusBottomCanvas();
            buildPlusTopCanvas();
            buildMinusTopCanvas();
            buildPlusSingleCanvas();
            buildMinusSingleCanvas();
        }
    }

    function getLineCenterCanvas() {
        return document.getElementById("cTree_lineCenterCanvas");
    }

    function buildLineCenterCanvas() {
        var canvas = getLineCenterCanvas();
        var context = canvas.getContext("2d");
        var imgData = context.createImageData(18, 18);
        for (var i = 1; i < 10; i++) {
            renderGrayDot(imgData, 9, 2 * i);
        }
        for (var i = 11; i < 18; i = i + 2) {
            renderGrayDot(imgData, i, 10);
        }
        context.putImageData(imgData, 0, 0);
        $.ctree.line_center_canvasURL = canvas.toDataURL();
    }

    function getPlusCenterCanvas() {
        return document.getElementById("cTree_plusCenterCanvas");
    }

    function buildPlusCenterCanvas() {
        var canvas = getPlusCenterCanvas();
        var context = canvas.getContext("2d");
        var imgData = context.createImageData(18, 18);
        renderGrayDot(imgData, 9, 2);
        renderGrayDot(imgData, 9, 4);
        renderGrayDot(imgData, 9, 16);
        renderGrayDot(imgData, 9, 18);
        renderGrayDot(imgData, 15, 10);
        renderGrayDot(imgData, 17, 10);
        for (var i = 6; i < 14; i++) {
            renderBlueDot(imgData, i - 1, 6);
            renderBlueDot(imgData, 13, i);
            renderBlueDot(imgData, 5, i + 1);
            renderBlueDot(imgData, i, 14);
        }
        for (var i = 7; i < 12; i++) {
            renderBlackDot(imgData, i, 10);
            renderBlackDot(imgData, 9, i + 1);
        }
        context.putImageData(imgData, 0, 0);
        $.ctree.plus_center_canvasURL = canvas.toDataURL();
    }

    function buildLineBottomCanvas() {
        var canvas = document.getElementById("cTree_lineBottomCanvas");
        var context = canvas.getContext("2d");
        context.drawImage(getLineCenterCanvas(), 0, 0);
        var imgData = context.getImageData(0, 0, 18, 18);
        for (var i = 6; i < 10; i++) {
            removeDot(imgData, 9, 2 * i);
        }
        context.putImageData(imgData, 0, 0);
        $.ctree.line_bottom_canvasURL = canvas.toDataURL();
    }

    function buildLineConnCanvas() {
        var canvas = document.getElementById("cTree_lineConnCanvas");
        var context = canvas.getContext("2d");
        context.drawImage(getLineCenterCanvas(), 0, 0);
        var imgData = context.getImageData(0, 0, 18, 18);
        for (var i = 5; i < 9; i++) {
            removeDot(imgData, 2 * i + 1, 10);
        }
        context.putImageData(imgData, 0, 0);
        $.ctree.line_conn_canvasURL = canvas.toDataURL();
    }

    function buildMinusCenterCanvas() {
        buildCustomCanvas("cTree_minusCenterCanvas", [removePlus], "minus_center_canvasURL");
    }

    function buildPlusBottomCanvas() {
        buildCustomCanvas("cTree_plusBottomCanvas", [removeBottomTwoDot], "plus_bottom_canvasURL");
    }

    function buildMinusBottomCanvas() {
        buildCustomCanvas("cTree_minusBottomCanvas", [removeBottomTwoDot, removePlus], "minus_bottom_canvasURL");
    }

    function buildPlusTopCanvas() {
        buildCustomCanvas("cTree_plusTopCanvas", [removeUpperTwoDot], "plus_top_canvasURL");
    }

    function buildMinusTopCanvas() {
        buildCustomCanvas("cTree_minusTopCanvas", [removeUpperTwoDot, removePlus], "minus_top_canvasURL");
    }

    function buildPlusSingleCanvas() {
        buildCustomCanvas("cTree_plusSingleCanvas", [removeUpperTwoDot, removeBottomTwoDot], "plus_single_canvasURL");
    }

    function buildMinusSingleCanvas() {
        buildCustomCanvas("cTree_minusSingleCanvas", [removeUpperTwoDot, removeBottomTwoDot, removePlus], "minus_single_canvasURL");
    }

    function buildCustomCanvas(elementId, removeFnArray, cTreeCanvasVar) {
        var canvas = document.getElementById(elementId);
        var context = canvas.getContext("2d");
        context.drawImage(getPlusCenterCanvas(), 0, 0);
        var imgData = context.getImageData(0, 0, 18, 18);
        for (var i = 0; i < removeFnArray.length; i++) {
            removeFnArray[i](imgData);
        }
        context.putImageData(imgData, 0, 0);
        $.ctree[cTreeCanvasVar] = canvas.toDataURL();
    }

    function renderGrayDot(imgData, x, y) {
        renderDot(imgData, x, y, $.ctree.rgbGray);
    }

    function renderBlueDot(imgData, x, y) {
        renderDot(imgData, x, y, $.ctree.rgbBlue);
    }

    function renderBlackDot(imgData, x, y) {
        renderDot(imgData, x, y, $.ctree.rgbBlack);
    }

    function renderDot(imgData, x, y, rgbArray) {
        var offset = getOffset(imgData, x, y);
        imgData.data[offset] = rgbArray[0];
        imgData.data[offset + 1] = rgbArray[1];
        imgData.data[offset + 2] = rgbArray[2];
        imgData.data[offset + 3] = 255;
    }

    function removeDot(imgData, x, y) {
        var offset = getOffset(imgData, x, y);
        imgData.data[offset + 3] = 0;
    }

    function getOffset(imgData, x, y) {
        return (y - 1) * 4 * imgData.width + (x - 1) * 4;
    }

    function removePlus(imgData) {
        removeDot(imgData, 9, 8);
        removeDot(imgData, 9, 9);
        removeDot(imgData, 9, 11);
        removeDot(imgData, 9, 12);
    }

    function removeBottomTwoDot(imgData) {
        removeDot(imgData, 9, 16);
        removeDot(imgData, 9, 18);
    }

    function removeUpperTwoDot(imgData) {
        removeDot(imgData, 9, 2);
        removeDot(imgData, 9, 4);
    }
})(jQuery);
